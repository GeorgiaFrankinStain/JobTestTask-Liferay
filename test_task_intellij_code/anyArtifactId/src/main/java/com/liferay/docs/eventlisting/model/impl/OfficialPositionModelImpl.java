package com.liferay.docs.eventlisting.model.impl;

import com.liferay.docs.eventlisting.model.OfficialPosition;
import com.liferay.docs.eventlisting.model.OfficialPositionModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OfficialPosition service. Represents a row in the &quot;Event_OfficialPosition&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.eventlisting.model.OfficialPositionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OfficialPositionImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see OfficialPositionImpl
 * @see com.liferay.docs.eventlisting.model.OfficialPosition
 * @see com.liferay.docs.eventlisting.model.OfficialPositionModel
 * @generated
 */
public class OfficialPositionModelImpl extends BaseModelImpl<OfficialPosition>
    implements OfficialPositionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a official position model instance should use the {@link com.liferay.docs.eventlisting.model.OfficialPosition} interface instead.
     */
    public static final String TABLE_NAME = "Event_OfficialPosition";
    public static final Object[][] TABLE_COLUMNS = {
            { "officialPositionId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "is_archived", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Event_OfficialPosition (officialPositionId LONG not null primary key,name VARCHAR(75) null,is_archived BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Event_OfficialPosition";
    public static final String ORDER_BY_JPQL = " ORDER BY officialPosition.officialPositionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Event_OfficialPosition.officialPositionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.docs.eventlisting.model.OfficialPosition"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.docs.eventlisting.model.OfficialPosition"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.docs.eventlisting.model.OfficialPosition"));
    private static ClassLoader _classLoader = OfficialPosition.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            OfficialPosition.class
        };
    private long _officialPositionId;
    private String _name;
    private boolean _is_archived;
    private OfficialPosition _escapedModel;

    public OfficialPositionModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _officialPositionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setOfficialPositionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _officialPositionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return OfficialPosition.class;
    }

    @Override
    public String getModelClassName() {
        return OfficialPosition.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("officialPositionId", getOfficialPositionId());
        attributes.put("name", getName());
        attributes.put("is_archived", getIs_archived());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long officialPositionId = (Long) attributes.get("officialPositionId");

        if (officialPositionId != null) {
            setOfficialPositionId(officialPositionId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        Boolean is_archived = (Boolean) attributes.get("is_archived");

        if (is_archived != null) {
            setIs_archived(is_archived);
        }
    }

    @Override
    public long getOfficialPositionId() {
        return _officialPositionId;
    }

    @Override
    public void setOfficialPositionId(long officialPositionId) {
        _officialPositionId = officialPositionId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public boolean getIs_archived() {
        return _is_archived;
    }

    @Override
    public boolean isIs_archived() {
        return _is_archived;
    }

    @Override
    public void setIs_archived(boolean is_archived) {
        _is_archived = is_archived;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            OfficialPosition.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public OfficialPosition toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (OfficialPosition) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        OfficialPositionImpl officialPositionImpl = new OfficialPositionImpl();

        officialPositionImpl.setOfficialPositionId(getOfficialPositionId());
        officialPositionImpl.setName(getName());
        officialPositionImpl.setIs_archived(getIs_archived());

        officialPositionImpl.resetOriginalValues();

        return officialPositionImpl;
    }

    @Override
    public int compareTo(OfficialPosition officialPosition) {
        long primaryKey = officialPosition.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof OfficialPosition)) {
            return false;
        }

        OfficialPosition officialPosition = (OfficialPosition) obj;

        long primaryKey = officialPosition.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<OfficialPosition> toCacheModel() {
        OfficialPositionCacheModel officialPositionCacheModel = new OfficialPositionCacheModel();

        officialPositionCacheModel.officialPositionId = getOfficialPositionId();

        officialPositionCacheModel.name = getName();

        String name = officialPositionCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            officialPositionCacheModel.name = null;
        }

        officialPositionCacheModel.is_archived = getIs_archived();

        return officialPositionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(7);

        sb.append("{officialPositionId=");
        sb.append(getOfficialPositionId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", is_archived=");
        sb.append(getIs_archived());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(13);

        sb.append("<model><model-name>");
        sb.append("com.liferay.docs.eventlisting.model.OfficialPosition");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>officialPositionId</column-name><column-value><![CDATA[");
        sb.append(getOfficialPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>is_archived</column-name><column-value><![CDATA[");
        sb.append(getIs_archived());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
