package com.liferay.docs.eventlisting.model.impl;

import com.liferay.docs.eventlisting.model.Worker;
import com.liferay.docs.eventlisting.model.WorkerModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Worker service. Represents a row in the &quot;Event_Worker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.eventlisting.model.WorkerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkerImpl}.
 * </p>
 *
 * @author Joe Bloggs
 * @see WorkerImpl
 * @see com.liferay.docs.eventlisting.model.Worker
 * @see com.liferay.docs.eventlisting.model.WorkerModel
 * @generated
 */
public class WorkerModelImpl extends BaseModelImpl<Worker>
    implements WorkerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a worker model instance should use the {@link com.liferay.docs.eventlisting.model.Worker} interface instead.
     */
    public static final String TABLE_NAME = "Event_Worker";
    public static final Object[][] TABLE_COLUMNS = {
            { "workerId", Types.BIGINT },
            { "name", Types.VARCHAR },
            { "lastname", Types.VARCHAR },
            { "patronymic", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table Event_Worker (workerId LONG not null primary key,name VARCHAR(75) null,lastname VARCHAR(75) null,patronymic VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table Event_Worker";
    public static final String ORDER_BY_JPQL = " ORDER BY worker.workerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Event_Worker.workerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.docs.eventlisting.model.Worker"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.docs.eventlisting.model.Worker"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.docs.eventlisting.model.Worker"));
    private static ClassLoader _classLoader = Worker.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Worker.class };
    private long _workerId;
    private String _name;
    private String _lastname;
    private String _patronymic;
    private Worker _escapedModel;

    public WorkerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _workerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setWorkerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _workerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Worker.class;
    }

    @Override
    public String getModelClassName() {
        return Worker.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("workerId", getWorkerId());
        attributes.put("name", getName());
        attributes.put("lastname", getLastname());
        attributes.put("patronymic", getPatronymic());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long workerId = (Long) attributes.get("workerId");

        if (workerId != null) {
            setWorkerId(workerId);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String lastname = (String) attributes.get("lastname");

        if (lastname != null) {
            setLastname(lastname);
        }

        String patronymic = (String) attributes.get("patronymic");

        if (patronymic != null) {
            setPatronymic(patronymic);
        }
    }

    @Override
    public long getWorkerId() {
        return _workerId;
    }

    @Override
    public void setWorkerId(long workerId) {
        _workerId = workerId;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getLastname() {
        if (_lastname == null) {
            return StringPool.BLANK;
        } else {
            return _lastname;
        }
    }

    @Override
    public void setLastname(String lastname) {
        _lastname = lastname;
    }

    @Override
    public String getPatronymic() {
        if (_patronymic == null) {
            return StringPool.BLANK;
        } else {
            return _patronymic;
        }
    }

    @Override
    public void setPatronymic(String patronymic) {
        _patronymic = patronymic;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Worker.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Worker toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Worker) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        WorkerImpl workerImpl = new WorkerImpl();

        workerImpl.setWorkerId(getWorkerId());
        workerImpl.setName(getName());
        workerImpl.setLastname(getLastname());
        workerImpl.setPatronymic(getPatronymic());

        workerImpl.resetOriginalValues();

        return workerImpl;
    }

    @Override
    public int compareTo(Worker worker) {
        long primaryKey = worker.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Worker)) {
            return false;
        }

        Worker worker = (Worker) obj;

        long primaryKey = worker.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Worker> toCacheModel() {
        WorkerCacheModel workerCacheModel = new WorkerCacheModel();

        workerCacheModel.workerId = getWorkerId();

        workerCacheModel.name = getName();

        String name = workerCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            workerCacheModel.name = null;
        }

        workerCacheModel.lastname = getLastname();

        String lastname = workerCacheModel.lastname;

        if ((lastname != null) && (lastname.length() == 0)) {
            workerCacheModel.lastname = null;
        }

        workerCacheModel.patronymic = getPatronymic();

        String patronymic = workerCacheModel.patronymic;

        if ((patronymic != null) && (patronymic.length() == 0)) {
            workerCacheModel.patronymic = null;
        }

        return workerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(9);

        sb.append("{workerId=");
        sb.append(getWorkerId());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", lastname=");
        sb.append(getLastname());
        sb.append(", patronymic=");
        sb.append(getPatronymic());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(16);

        sb.append("<model><model-name>");
        sb.append("com.liferay.docs.eventlisting.model.Worker");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>workerId</column-name><column-value><![CDATA[");
        sb.append(getWorkerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastname</column-name><column-value><![CDATA[");
        sb.append(getLastname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>patronymic</column-name><column-value><![CDATA[");
        sb.append(getPatronymic());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
